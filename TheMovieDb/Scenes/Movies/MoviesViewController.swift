//
//  MoviesViewController.swift
//  TheMovieDb
//
//  Created by Marcio Habigzang Brufatto on 16/10/19.
//  Copyright (c) 2019 Marcio Habigzang Brufatto. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesDisplayLogic: class {
    func displayMovies(viewModel: MoviesScene.Load.ViewModel)
}

class MoviesViewController: UIViewController, MoviesDisplayLogic {
    var interactor: MoviesBusinessLogic?
    var router: (NSObjectProtocol & MoviesRoutingLogic & MoviesDataPassing)?
    
    let moviesView = MoviesView()
    var arrayMovies = [Movie]()

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MoviesInteractor()
        let presenter = MoviesPresenter()
        let router = MoviesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func loadView() {
        view = moviesView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "Filmes"
        
        moviesView.collectionView.register(UINib(nibName: "MovieViewCell", bundle: nil), forCellWithReuseIdentifier: MovieViewCell.cellIdentifier)
        
        moviesView.collectionView.dataSource = self
        moviesView.collectionView.delegate = self
        
        loadData()
    }
    
    func loadData() {
        let request = MoviesScene.Load.Request()
        interactor?.doLoadMovies(request: request)
    }
    
    func displayMovies(viewModel: MoviesScene.Load.ViewModel) {
        arrayMovies = viewModel.movies
    }
}


//MARK: UICOLLECTION VIEW DELEGATE
extension MoviesViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
//        let event = arrayEvents[indexPath.row]
//        let request = EventScene.EventDetail.Request(event: event, user: user!)
//        interactor?.doLoadEventDetail(request: request)
    }
}

extension MoviesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return arrayMovies.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: MovieViewCell.cellIdentifier, for: indexPath) as! MovieViewCell
        
        cell.loadPoster(posterPath: arrayMovies[indexPath.row].posterPath)
        
        return cell
    }
}
